// src/bot/services/imageGenerator.js
import logger from "./../../config/logger.js";
import axios from "axios";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { Markup, Context } from "telegraf";
import { activeRequests } from "../sharedState.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export const generateImage = async (ctx: Context, prompt: string) => {
  const userId = ctx.from?.id;
  if (!userId) {
    return;
  }

  const apiKey = process.env.GPT_API_KEY;
  const folderId = process.env.FOLDER_ID;

  if (!apiKey || !folderId) {
    logger.error("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-–∫–ª—é—á –∏–ª–∏ Folder ID");
    return ctx.reply("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-–∫–ª—é—á.");
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
  const cancelMessage = await ctx.reply(
    `üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.`,
    Markup.inlineKeyboard([Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", `cancel_${userId}`)])
  );
  activeRequests.set(userId, cancelMessage.message_id);

  const data = {
    modelUri: `art://${folderId}/yandex-art/latest`,
    generationOptions: { width: 1024, height: 1024 },
    messages: [{ weight: "1", text: prompt }],
  };

  let requestId;
  try {
    const response = await axios.post(
      "https://llm.api.cloud.yandex.net/foundationModels/v1/imageGenerationAsync",
      data,
      { headers: { Authorization: `Api-Key ${apiKey}`, "x-folder-id": folderId } }
    );
    requestId = response.data.id;
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    return;
  }

  let imageData = null;
  const maxAttempts = 24;
  let attempt = 0;

  while (attempt < maxAttempts) {
    attempt++;
    await new Promise((resolve) => setTimeout(resolve, 5000));

    if (!activeRequests.has(userId)) {
      // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é)
      return;
    }

    logger.info(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts})...`);

    let statusResponse;
    try {
      statusResponse = await axios.get(
        `https://llm.api.cloud.yandex.net:443/operations/${requestId}`,
        { headers: { Authorization: `Api-Key ${apiKey}`, "x-folder-id": folderId } }
      );
    } catch (error) {
      if (error) logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞:", (error as Error).message);
      ctx.reply("‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      return;
    }

    if (statusResponse.data.done) {
      if (statusResponse.data.response?.image) {
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        imageData = statusResponse.data.response.image;
        break;
      } else {
        ctx.reply("‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ.");
        return;
      }
    }
  }

  activeRequests.delete(userId);

  if (!imageData) {
    ctx.reply("‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    return;
  }

  const filePath = path.resolve(__dirname, "../generated_image.png");

  try {
    const imageBuffer = Buffer.from(imageData, "base64");
    await fs.promises.writeFile(filePath, imageBuffer);
  } catch (err) {
    logger.error(err);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
    return;
  }

  await ctx.replyWithPhoto({ source: filePath }, { caption: `üñº –ó–∞–ø—Ä–æ—Å: "${prompt}"` });

  fs.promises.unlink(filePath).catch(() => {});
};
