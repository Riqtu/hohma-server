import axios from "axios";
import logger from "#config/logger.js";
import { downloadVideo } from "#bot/commands/download.js";

export const handleInlineQuery = (bot) => {
  bot.on("inline_query", async (ctx) => {
    const query = ctx.inlineQuery.query.trim();
    if (!query) {
      return;
    }

    const urlRegex =
      /(https?:\/\/(?:www\.)?(?:tiktok\.com|vt\.tiktok\.com|instagram\.com)\/[^\s]+)/i;
    const urlMatch = query.match(urlRegex);

    if (urlMatch) {
      const url = urlMatch[0];

      try {
        logger.info(`üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∑–∞–ø—Ä–æ—Å–∞ —Å —Å—Å—ã–ª–∫–æ–π: ${url}`);

        // 2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –∏ –ø–æ–ª—É—á–∞–µ–º URL –∏–∑ S3
        const s3Url = await downloadVideo(url, bot);

        if (!s3Url) {
          throw new Error("–í–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ");
        }

        // 3Ô∏è‚É£ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω)
        return ctx.answerInlineQuery(
          [
            {
              type: "video",
              id: String(Date.now()),
              video_url: s3Url,
              mime_type: "video/mp4",
              title: "–°–∫–∞—á–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ",
              description: "–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç",
              thumb_url: "https://img.icons8.com/fluency/48/000000/video.png",
            },
          ],
          { cache_time: 1 }
        );
      } catch (error) {
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ:", error);

        return ctx.answerInlineQuery(
          [
            {
              type: "article",
              id: "error",
              title: "–û—à–∏–±–∫–∞",
              input_message_content: {
                message_text: "üö® –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
              },
              description: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ",
            },
          ],
          { cache_time: 1 }
        );
      }
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –ù–ï —Å—Å—ã–ª–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GPT
    try {
      logger.info(`üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ GPT: ${query}`);

      const apiKey = process.env.GPT_API_KEY;
      const folderId = process.env.FOLDER_ID;

      if (!apiKey || !folderId) {
        logger.error("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-–∫–ª—é—á –∏–ª–∏ Folder ID");
        return ctx.answerInlineQuery(
          [
            {
              type: "article",
              id: "gpt_error",
              title: "–û—à–∏–±–∫–∞",
              input_message_content: {
                message_text: "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GPT.",
              },
              description: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-–∫–ª—é—á –¥–ª—è GPT",
            },
          ],
          { cache_time: 1 }
        );
      }

      const data = {
        modelUri: `gpt://${folderId}/yandexgpt-lite/latest`,
        completionOptions: {
          stream: false,
          temperature: 0.6,
          maxTokens: 500,
        },
        messages: [
          {
            role: "system",
            text: '–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∫–∞ –ø–æ –∏–º–µ–Ω–∏ "–•–æ—Ö–º–∞". –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ —à—É—Ç–∏.',
          },
          { role: "user", text: query },
        ],
      };

      const response = await axios.post(
        "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
        data,
        {
          headers: {
            Authorization: `Api-Key ${apiKey}`,
            "x-folder-id": folderId,
          },
        }
      );

      const textResponse = response.data.result.alternatives[0].message.text;

      const escapeMarkdownV2 = (text) => {
        return text
          .replace(/_/g, "\\_")
          .replace(/\*/g, "\\*")
          .replace(/\[/g, "\\[")
          .replace(/\]/g, "\\]")
          .replace(/\(/g, "\\(")
          .replace(/\)/g, "\\)")
          .replace(/~/g, "\\~")
          .replace(/`/g, "\\`")
          .replace(/>/g, "\\>") // <<< –≤–∞–∂–Ω–æ –¥–ª—è —Ü–∏—Ç–∞—Ç—ã
          .replace(/#/g, "\\#")
          .replace(/\+/g, "\\+")
          .replace(/-/g, "\\-")
          .replace(/=/g, "\\=")
          .replace(/\|/g, "\\|")
          .replace(/\{/g, "\\{")
          .replace(/\}/g, "\\}")
          .replace(/\./g, "\\.")
          .replace(/!/g, "\\!");
      };

      return ctx.answerInlineQuery(
        [
          {
            type: "article",
            id: "gpt_response",
            title: "–û—Ç–≤–µ—Ç –æ—Ç –•–æ—Ö–º—ã ü§ñ",
            input_message_content: {
              message_text: `üôã*–ó–∞–ø—Ä–æ—Å:*\n> ${escapeMarkdownV2(query)}\nü§ñ *–û—Ç–≤–µ—Ç:*\n> ${escapeMarkdownV2(textResponse)}`,
              parse_mode: "MarkdownV2",
            },
            description: textResponse.slice(0, 50) + "...",
            thumb_url: "https://img.icons8.com/?size=100&id=q7wteb2_yVxu&format=png&color=000000",
          },
        ],
        { cache_time: 1 }
      );
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ GPT-–∑–∞–ø—Ä–æ—Å–∞:", error);

      return ctx.answerInlineQuery(
        [
          {
            type: "article",
            id: "gpt_error",
            title: "–û—à–∏–±–∫–∞",
            input_message_content: {
              message_text: "üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            },
            description: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ GPT",
          },
        ],
        { cache_time: 1 }
      );
    }
  });
};
