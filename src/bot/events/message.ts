// src/bot/events/message.js
import axios from "axios";
import logger from "./../../config/logger.js";
import { userState } from "../sharedState.js"; // –ò–º–ø–æ—Ä—Ç –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
import { generateImage } from "./../../bot/services/imageGenerator.js";
import { downloadVideo } from "./../../bot/commands/download.js";
import { Telegraf, Context } from "telegraf";
/**
 * –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
 * –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è (–ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /draw –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è) ‚Äì –±–µ—Ä–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ.
 * –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ YandexGPT.
 */
// src/bot/unifiedHandler.js
// src/bot/events/message.js (unifiedTextHandler)
export const unifiedTextHandler = (bot: Telegraf<Context>) => {
  bot.on("text", async (ctx, next) => {
    const userId = ctx.from?.id;
    if (!userId) {
      return next();
    }

    const text = ctx.message.text;

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ–º–∞–Ω–¥—ã, –ø–µ—Ä–µ–¥–∞—ë–º –µ–≥–æ –¥–∞–ª—å—à–µ
    if (text.startsWith("/")) {
      return next();
    }

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –∏–ª–∏ Instagram ‚Äì –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    const urlRegex =
      /(https?:\/\/(?:www\.)?(?:tiktok\.com|vt\.tiktok\.com|instagram\.com)\/[^\s]+)/i;
    const urlMatch = text.match(urlRegex);
    if (urlMatch) {
      const url = urlMatch[0];
      try {
        // –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ (downloadVideo –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)
        await downloadVideo(url, bot, ctx);
      } catch (error) {
        logger.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: ${error}`);
        ctx.reply("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ.");
      }
      // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
      return;
    }

    // 1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /draw:
    if (userState.get(userId)) {
      const prompt = text.trim();
      userState.delete(userId);
      if (!prompt) {
        return ctx.reply("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
      }
      return generateImage(ctx, prompt);
    }

    // 2. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ ‚Äì –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º GPT-–∑–∞–ø—Ä–æ—Å:
    if (text.includes(ctx.botInfo.username)) {
      try {
        const command = text.replace(`@${ctx.botInfo.username}`, "").trim();
        const apiKey = process.env.GPT_API_KEY;
        const folderId = process.env.FOLDER_ID;

        if (!apiKey || !folderId) {
          logger.error("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-–∫–ª—é—á –∏–ª–∏ Folder ID");
          return ctx.reply("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-–∫–ª—é—á.");
        }

        const data = {
          modelUri: `gpt://${folderId}/yandexgpt-lite/latest`,
          completionOptions: {
            stream: false,
            temperature: 0.6,
            maxTokens: 500,
          },
          messages: [
            {
              role: "system",
              text: '–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∫–∞ –ø–æ –∏–º–µ–Ω–∏ "–•–æ—Ö–º–∞". –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ —à—É—Ç–∏.',
            },
            { role: "user", text: command },
          ],
        };

        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ YandexGPT:", JSON.stringify(data, null, 2));
        const response = await axios.post(
          "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
          data,
          {
            headers: {
              Authorization: `Api-Key ${apiKey}`,
              "x-folder-id": folderId,
            },
          }
        );

        logger.info("–û—Ç–≤–µ—Ç –æ—Ç YandexGPT:", response.data);
        return ctx.reply(response.data.result.alternatives[0].message.text);
      } catch (error) {
        let errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.";
        if (error && typeof error === "object" && "response" in error) {
          const err = error as { response?: { data?: any } };
          errorMessage = err.response?.data || errorMessage;
        }
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ YandexGPT:", errorMessage);
        return ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      }
    }

    // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    return next();
  });
};

export default unifiedTextHandler;
