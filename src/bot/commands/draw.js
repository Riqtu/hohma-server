import logger from "#config/logger.js";
import axios from "axios";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { Markup } from "telegraf";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–≤–∞–ª–∏ /draw –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
const userState = new Map();
// –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
const activeRequests = new Map();

const drawCommand = (bot) => {
  bot.command("draw", async (ctx) => {
    const userId = ctx.from?.id;
    if (!userId) {
      return;
    }

    const prompt = ctx.message.text.replace(/\/draw(@\w+)?/, "").trim();

    if (prompt) {
      generateImage(ctx, prompt);
    } else {
      userState.set(userId, true);
      ctx.reply(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏ —è –µ–≥–æ –Ω–∞—Ä–∏—Å—É—é!",
        Markup.inlineKeyboard([Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", `cancel_waiting_${userId}`)])
      );
    }
  });

  bot.on("text", async (ctx) => {
    const userId = ctx.from?.id;
    if (!userId || !userState.get(userId)) {
      return;
    }

    const prompt = ctx.message.text.trim();
    userState.delete(userId);

    if (!prompt) {
      ctx.reply("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
      return;
    }

    generateImage(ctx, prompt);
  });

  // –ö–æ–º–∞–Ω–¥–∞ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
  bot.command("cancel", async (ctx) => {
    const userId = ctx.from?.id;
    if (!userId || !userState.has(userId)) {
      ctx.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.");
      return;
    }

    userState.delete(userId);
    ctx.reply("‚ùå –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
  bot.action(/^cancel_waiting_(\d+)$/, async (ctx) => {
    const userId = Number(ctx.match[1]);
    if (!userState.has(userId)) {
      ctx.answerCbQuery("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è.");
      return;
    }

    userState.delete(userId);
    ctx.answerCbQuery("–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
    ctx.editMessageText("‚ùå –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  bot.action(/^cancel_(\d+)$/, async (ctx) => {
    const userId = Number(ctx.match[1]);
    if (!activeRequests.has(userId)) {
      ctx.answerCbQuery("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.");
      return;
    }

    activeRequests.delete(userId);
    ctx.answerCbQuery("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
    ctx.editMessageText("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
  });
};

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const generateImage = async (ctx, prompt) => {
  const userId = ctx.from?.id;
  if (!userId) {
    return;
  }

  const apiKey = process.env.GPT_API_KEY;
  const folderId = process.env.FOLDER_ID;

  if (!apiKey || !folderId) {
    logger.error("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-–∫–ª—é—á –∏–ª–∏ Folder ID");
    ctx.reply("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-–∫–ª—é—á.");
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
  const cancelMessage = await ctx.reply(
    `üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.`,
    Markup.inlineKeyboard([Markup.button.callback("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", `cancel_${userId}`)])
  );

  activeRequests.set(userId, cancelMessage.message_id);

  const data = {
    modelUri: `art://${folderId}/yandex-art/latest`,
    generationOptions: { width: 1024, height: 1024 },
    messages: [{ weight: "1", text: prompt }],
  };

  let requestId;
  try {
    const response = await axios.post(
      "https://llm.api.cloud.yandex.net/foundationModels/v1/imageGenerationAsync",
      data,
      { headers: { Authorization: `Api-Key ${apiKey}`, "x-folder-id": folderId } }
    );
    requestId = response.data.id;
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    return;
  }

  let imageData = null;
  const maxAttempts = 24;
  let attempt = 0;

  while (attempt < maxAttempts) {
    attempt++;
    await new Promise((resolve) => setTimeout(resolve, 5000));

    if (!activeRequests.has(userId)) {
      return; // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞
    }

    logger.info(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts})...`);

    let statusResponse;
    try {
      statusResponse = await axios.get(
        `https://llm.api.cloud.yandex.net:443/operations/${requestId}`,
        { headers: { Authorization: `Api-Key ${apiKey}`, "x-folder-id": folderId } }
      );
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞:", error.message);
      ctx.reply("‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      return;
    }

    if (statusResponse.data.done) {
      if (statusResponse.data.response?.image) {
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        imageData = statusResponse.data.response.image;
        break;
      } else {
        ctx.reply("‚ùå –û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ.");
        return;
      }
    }
  }

  activeRequests.delete(userId);

  if (!imageData) {
    ctx.reply("‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    return;
  }

  const filePath = path.resolve(__dirname, "../generated_image.png");

  try {
    const imageBuffer = Buffer.from(imageData, "base64");
    await fs.promises.writeFile(filePath, imageBuffer);
  } catch (err) {
    logger.error(err);
    ctx.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
    return;
  }

  await ctx.replyWithPhoto({ source: filePath }, { caption: `üñº –ó–∞–ø—Ä–æ—Å: "${prompt}"` });

  fs.promises.unlink(filePath).catch(() => {});
};

export default drawCommand;
