import logger from "#config/logger.js";
import axios from "axios";
import fs from "fs";
import path from "path";
import TikTokScraper from "@riqtu/tiktok-scraper";
import { IgApiClient } from "instagram-private-api";
import { SocksProxyAgent } from "socks-proxy-agent";
import { uploadToS3 } from "#services/s3.js";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å—Å—ã–ª–æ–∫
const expandShortUrl = async (shortUrl) => {
  const response = await axios.get(shortUrl, {
    maxRedirects: 0,
    validateStatus: () => true,
  });
  if (response.status >= 300 && response.status < 400 && response.headers.location) {
    return response.headers.location;
  }
  return shortUrl;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ URL (—É–¥–∞–ª—è–µ—Ç query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
const cleanUrl = (url) => {
  const parsedUrl = new URL(url);
  parsedUrl.search = "";
  return parsedUrl.toString();
};

const shortcodeToId = (shortcode) => {
  const alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
  let id = BigInt(0);
  for (let i = 0; i < shortcode.length; i++) {
    const index = BigInt(alphabet.indexOf(shortcode[i]));
    id = id * BigInt(64) + index;
  }
  return id.toString();
};
// –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è mediaId –∏–∑ URL Instagram
// –ü—Ä–∏–º–µ—Ä: https://www.instagram.com/p/ABCDEF123/  ‚Üí "ABCDEF123"
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è mediaId –∏–∑ URL Instagram (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ /p/, –∏ /reel/)
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è mediaId –∏–∑ URL Instagram –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è shortcode –≤ media_id
const extractMediaId = (url) => {
  const match = url.match(/instagram\.com\/(?:p|reel)\/([^\/\?]+)/);
  if (!match) {
    return null;
  }
  const shortcode = match[1];
  logger.info(`–ù–∞–π–¥–µ–Ω shortcode: ${shortcode}`);

  return shortcodeToId(shortcode);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ Instagram
const downloadInstagramVideo = async (postUrl) => {
  const ig = new IgApiClient();
  ig.state.generateDevice(process.env.IG_USERNAME);

  // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
  try {
    await ig.account.login(process.env.IG_USERNAME, process.env.IG_PASSWORD);
  } catch (error) {
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å challenge_required, –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
    if (
      error.response &&
      error.response.body &&
      error.response.body.message &&
      error.response.body.message.includes("challenge_required")
    ) {
      try {
        // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const challenge = await ig.challenge.auto(true);
        logger.info(`Challenge auto result: ${JSON.stringify(challenge)}`);
        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ auto –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–æ–¥ –∫–æ–¥–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      } catch (challengeError) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é: " + challengeError.message);
      }
    } else {
      throw error;
    }
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ–¥–∏–∞ –∏–∑ URL
  const mediaId = extractMediaId(postUrl);
  if (!mediaId) {
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ–¥–∏–∞ –∏–∑ URL Instagram");
  }

  const mediaInfo = await ig.media.info(mediaId);
  const videoUrl = mediaInfo.items[0]?.video_versions?.[0]?.url;
  if (!videoUrl) {
    throw new Error("–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö Instagram");
  }

  // –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ
  const response = await axios.get(videoUrl, { responseType: "stream" });
  const tempDir = path.resolve(process.cwd(), "downloads");
  if (!fs.existsSync(tempDir)) {
    fs.mkdirSync(tempDir);
  }
  const videoPath = path.join(tempDir, `instagram_${Date.now()}.mp4`);
  const writer = fs.createWriteStream(videoPath);
  response.data.pipe(writer);

  await new Promise((resolve, reject) => {
    writer.on("finish", resolve);
    writer.on("error", reject);
  });

  return videoPath;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ TikTok —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º @xct007/tiktok-scraper
const downloadTikTokVideo = async (videoUrl) => {
  try {
    logger.info(`–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ –∏–∑ TikTok: ${videoUrl}`);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SOCKS5-–ø—Ä–æ–∫—Å–∏
    const agent = new SocksProxyAgent(process.env.SOCKS5_PROXY);
    // –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    const videoData = await TikTokScraper(videoUrl, {
      parse: false,
      proxy: process.env.SOCKS5_PROXY,
    });
    const awemeList = Array.isArray(videoData) ? videoData : videoData.collector;
    if (!awemeList || !awemeList.length) {
      throw new Error("–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
    }

    const videoObj = awemeList[0].video;
    let downloadLink =
      videoObj.download_addr?.url_list?.[0] ||
      videoObj.downloadAddr?.url_list?.[0] ||
      videoObj.play_addr?.url_list?.[0];

    if (!downloadLink) {
      logger.error(`–°—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –î–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ: ${JSON.stringify(videoObj)}`);
      throw new Error("–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö");
    }

    logger.info(`–ù–∞–π–¥–µ–Ω downloadLink: ${downloadLink}`);

    // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º —Å–∞–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
    const response = await axios.get(downloadLink, {
      responseType: "stream",
      httpAgent: agent,
      httpsAgent: agent,
    });

    const tempDir = path.resolve(process.cwd(), "downloads");
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir);
    }
    const videoPath = path.join(tempDir, `tiktok_${Date.now()}.mp4`);
    const writer = fs.createWriteStream(videoPath);
    response.data.pipe(writer);

    await new Promise((resolve, reject) => {
      writer.on("finish", resolve);
      writer.on("error", reject);
    });

    return videoPath;
  } catch (error) {
    throw error;
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ
export const downloadVideo = async (url, bot, ctx = null) => {
  try {
    logger.info(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ —Å URL: ${url}`);

    const expandedUrl = await expandShortUrl(url);
    const cleanedUrl = cleanUrl(expandedUrl);

    let videoPath;
    if (cleanedUrl.includes("tiktok.com") || cleanedUrl.includes("vt.tiktok.com")) {
      videoPath = await downloadTikTokVideo(cleanedUrl);
    } else if (cleanedUrl.includes("instagram.com")) {
      videoPath = await downloadInstagramVideo(cleanedUrl);
    } else {
      if (ctx) {
        return ctx.reply("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ TikTok –∏ Instagram.");
      }
      return null;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const fileName = `video_${Date.now()}.mp4`;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤ S3
    const s3Url = await uploadToS3(videoPath, fileName);

    // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    fs.unlinkSync(videoPath);

    if (ctx) {
      return await ctx.replyWithVideo(s3Url);
    }

    return s3Url;
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:", error);
    if (ctx) {
      ctx.reply("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ.");
    }
    return null;
  }
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /download, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ TikTok, –∏ Instagram
const downloadCommand = (bot) => {
  bot.command("download", async (ctx) => {
    const messageText = ctx.message.text;
    const url = messageText.split(" ")[1];

    if (!url) {
      return ctx.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /download [—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ]");
    }

    await downloadVideo(url, bot, ctx);
  });
};

export default downloadCommand;
