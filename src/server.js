import dotenv from "dotenv";
import https from "https";
import http from "http";
import app from "./app.js";
import connectDB from "./config/db.js";
import setupSocket from "./config/socket.js";
import setupSwagger from "./config/swagger.js";
import telegramService from "./services/telegramService.js"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
import schedule from "node-schedule";
import axios from "axios";

dotenv.config();
// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const privateKey = process.env.PRIVATE_KEY.replace(/\\n/g, "\n");
const certificate = process.env.CERTIFICATE.replace(/\\n/g, "\n");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTPS
const options = {
  key: privateKey,
  cert: certificate,
};

const port = process.env.PORT || 3000;
const mongoURI = process.env.MONGO_URI;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connectDB(mongoURI);

// –°–æ–∑–¥–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä
const httpsServer = https.createServer(options, app);

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const httpServer = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Swagger
setupSwagger(app);

schedule.scheduleJob("* 8 * * *", async () => {
  console.log("–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏.");
  const affirmation = await axios.get(
    "http://localhost:3000/api/affirmations/random"
  );
  if (affirmation.data) {
    const escapeMarkdownV2 = (text) =>
      text.replace(/[_*[\]()~`>#+\-=|{}.!]/g, "\\$&");

    const affirmationText = escapeMarkdownV2(
      affirmation?.data?.text || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é"
    );

    await telegramService.sendMessage(
      process.env.CHAT_ID,
      `
*üåü –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –•–û–•–ú—Ñ–∏—Ä–º–∞—Ü–∏—è üåü*

> ${affirmationText}


_–£–¥–∞—á–Ω–æ–≥–æ –≤–∞–º –¥–Ω—è_
      `,
      "MarkdownV2"
    );
  } else {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é.");
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (process.env.MODE === "DEV") {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO
  setupSocket(httpsServer);
  httpsServer.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://localhost:${port}`);
    console.log(`Swagger docs available at https://localhost:${port}/api-docs`);
  });
}

if (process.env.MODE === "PRODUCTION") {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO
  setupSocket(httpServer);
  httpServer.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
    console.log(`Swagger docs available at http://localhost:${port}/api-docs`);
  });
}
