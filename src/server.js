import dotenv from "dotenv";
import https from "https";
import http from "http";
import app from "./app.js";
import connectDB from "./config/db.js";
import setupSocket from "./config/socket.js";
import setupSwagger from "./config/swagger.js";
import telegramService from "./services/telegramService.js"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
import schedule from "node-schedule";
import axios from "axios";
import { Telegraf } from "telegraf";
import { message } from "telegraf/filters";
import fs from "fs";
import path from "path";

dotenv.config();
// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const privateKey = process.env.PRIVATE_KEY.replace(/\\n/g, "\n");
const certificate = process.env.CERTIFICATE.replace(/\\n/g, "\n");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTPS
const options = {
  key: privateKey,
  cert: certificate,
};

const port = process.env.PORT || 3000;
const mongoURI = process.env.MONGO_URI;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connectDB(mongoURI);

// –°–æ–∑–¥–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä
const httpsServer = https.createServer(options, app);

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const httpServer = http.createServer(app);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Swagger
setupSwagger(app);

schedule.scheduleJob("0 5 * * *", async () => {
  console.log("–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏.");
  const affirmation = await axios.get(
    "https://hohma-server.ru/api/affirmations/random"
  );
  if (affirmation.data) {
    const escapeMarkdownV2 = (text) =>
      text.replace(/[_*[\]()~`>#+\-=|{}.!]/g, "\\$&");

    const affirmationText = escapeMarkdownV2(
      affirmation?.data?.text || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é"
    );

    await telegramService.sendMessage(
      process.env.CHAT_ID,
      `
*üåü –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –•–û–•–ú—Ñ–∏—Ä–º–∞—Ü–∏—è üåü*

> ${affirmationText}


_–£–¥–∞—á–Ω–æ–≥–æ –≤–∞–º –¥–Ω—è_
      `,
      "MarkdownV2"
    );
  } else {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é.");
  }
});

const bot = new Telegraf(process.env.BOT_TOKEN);

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö
bot.telegram.setMyCommands([
  {
    command: "random",
    description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç (–î–∞ –∏–ª–∏ –ù–µ—Ç)",
  },
  {
    command: "draw",
    description: "–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é",
  },
]);
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random
bot.command("random", (ctx) => {
  const answer = Math.random() > 0.5 ? "–î–∞" : "–ù–µ—Ç";
  ctx.reply(answer);
});

bot.command("draw", async (ctx) => {
  try {
    const prompt = ctx.message.text.replace("/draw", "").trim();

    if (!prompt) {
      ctx.reply("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /draw.");
      return;
    }

    const apiKey = process.env.GPT_API_KEY;
    const folderId = process.env.FOLDER_ID;

    if (!apiKey || !folderId) {
      console.error("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-–∫–ª—é—á –∏–ª–∏ Folder ID");
      ctx.reply("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-–∫–ª—é—á.");
      return;
    }

    const data = {
      modelUri: `art://${folderId}/yandex-art/latest`,
      generationOptions: {
        width: 1024,
        height: 1024,
      },
      messages: [
        {
          weight: "1",
          text: prompt,
        },
      ],
    };

    ctx.reply("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.");

    const response = await axios.post(
      "https://llm.api.cloud.yandex.net/foundationModels/v1/imageGenerationAsync",
      data,
      {
        headers: {
          Authorization: `Api-Key ${apiKey}`,
          "x-folder-id": folderId,
        },
      }
    );

    const requestId = response.data.id;
    console.log("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", requestId);

    if (!requestId) {
      throw new Error("–û—à–∏–±–∫–∞ API: –Ω–µ –ø–æ–ª—É—á–µ–Ω ID –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.");
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    let imageData = null;
    for (let attempt = 0; attempt < 10; attempt++) {
      await new Promise((resolve) => setTimeout(resolve, 5000)); // –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥

      console.log(
        `üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}/10)...`
      );
      const statusResponse = await axios.get(
        `https://llm.api.cloud.yandex.net:443/operations/${requestId}`,
        {
          headers: {
            Authorization: `Api-Key ${apiKey}`,
            "x-folder-id": folderId,
          },
        }
      );

      console.log("–û—Ç–≤–µ—Ç API –Ω–∞ —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", statusResponse.data);

      if (statusResponse.data.done) {
        if (
          statusResponse.data.response &&
          statusResponse.data.response.image
        ) {
          console.log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
          imageData = statusResponse.data.response.image;
        } else {
          throw new Error("–û—à–∏–±–∫–∞ API: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
        }
        break;
      }
    }

    if (!imageData) {
      throw new Error("‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }

    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
    const filePath = path.resolve(__dirname, "../generated_image.png");

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ base64-–∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ —Ñ–∞–π–ª
    try {
      const imageBuffer = Buffer.from(imageData, "base64");
      fs.writeFileSync(filePath, imageBuffer);
      console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${filePath}`);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", err);
      ctx.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if (!fs.existsSync(filePath)) {
      console.error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:", filePath);
      ctx.reply("‚ùå –§–∞–π–ª —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await ctx.replyWithPhoto(
      { source: filePath },
      {
        caption: `üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${prompt}"`,
      }
    );

    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    fs.unlink(filePath, (err) => {
      if (err) console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", err);
      else console.log("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω:", filePath);
    });
  } catch (error) {
    console.error(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
      error.response?.data || error
    );
    ctx.reply(
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});
bot.on(message("text"), async (ctx) => {
  try {
    const msg = ctx.message.text;

    if (msg.includes(ctx.botInfo.username)) {
      const command = msg.replace(`@${ctx.botInfo.username}`, "").trim();
      if (command === "/random") {
        ctx.reply(Math.random() > 0.5 ? "–î–∞" : "–ù–µ—Ç");
        return;
      }

      const apiKey = process.env.GPT_API_KEY;
      const folderId = process.env.FOLDER_ID;

      if (!apiKey || !folderId) {
        console.error("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-–∫–ª—é—á –∏–ª–∏ Folder ID");
        ctx.reply("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API-–∫–ª—é—á.");
        return;
      }

      const data = {
        modelUri: `gpt://${folderId}/yandexgpt-lite/latest`,
        completionOptions: {
          stream: false,
          temperature: 0.6,
          maxTokens: 500, // –£–º–µ–Ω—å—à–∏–ª–∏ maxTokens
        },
        messages: [
          {
            role: "system",
            text: '–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∫–∞ –ø–æ –∏–º–µ–Ω–∏ "–•–æ—Ö–º–∞". –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ —à—É—Ç–∏.',
          },
          { role: "user", text: command },
        ],
      };

      console.log(
        "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ YandexGPT:",
        JSON.stringify(data, null, 2)
      );

      const response = await axios.post(
        "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
        data,
        {
          headers: {
            Authorization: `Api-Key ${apiKey}`,
            "x-folder-id": folderId,
          },
        }
      );

      console.log("–û—Ç–≤–µ—Ç –æ—Ç YandexGPT:", response.data);
      ctx.reply(response.data.result.alternatives[0].message.text);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ YandexGPT:", error.response?.data || error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot
  .launch()
  .then(() => console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω"))
  .catch((err) => console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", err));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (process.env.MODE === "DEV") {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO
  setupSocket(httpsServer);
  httpsServer.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://localhost:${port}`);
    console.log(`Swagger docs available at https://localhost:${port}/api-docs`);
  });
}

if (process.env.MODE === "PRODUCTION") {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO
  setupSocket(httpServer);
  httpServer.listen(port, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
    console.log(`Swagger docs available at http://localhost:${port}/api-docs`);
  });
}
