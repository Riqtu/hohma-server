import AWS from "aws-sdk";
import fs from "fs";
import logger from "#config/logger.js";
import dotenv from "dotenv";
dotenv.config();
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è S3 (–±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ .env)
const s3 = new AWS.S3({
  accessKeyId: process.env.S3_ACCESS_KEY,
  secretAccessKey: process.env.S3_SECRET_KEY,
  region: process.env.S3_REGION,
  endpoint: process.env.S3_ENDPOINT, // –ù–∞–ø—Ä–∏–º–µ—Ä, Yandex Object Storage –∏–ª–∏ MinIO
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ S3
export const uploadToS3 = async (filePath, fileName) => {
  try {
    const fileContent = fs.readFileSync(filePath);

    const params = {
      Bucket: process.env.S3_BUCKET_NAME,
      Key: `videos/${fileName}`, // –ü—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –±–∞–∫–µ—Ç–∞
      Body: fileContent,
      ContentType: "video/mp4",
      ACL: "public-read", // –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø–æ URL
    };

    const uploadResult = await s3.upload(params).promise();
    logger.info(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3: ${uploadResult.Location}`);

    return uploadResult.Location; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL —Ñ–∞–π–ª–∞
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3:", error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ S3
export const deleteFromS3 = async (fileName) => {
  try {
    const params = {
      Bucket: process.env.S3_BUCKET_NAME,
      Key: `videos/${fileName}`,
    };

    await s3.deleteObject(params).promise();
    logger.info(`üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ S3: videos/${fileName}`);
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ S3:", error);
  }
};
