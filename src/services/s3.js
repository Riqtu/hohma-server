import { S3Client, PutObjectCommand, DeleteObjectCommand } from "@aws-sdk/client-s3";
import fs from "fs";
import logger from "#config/logger.js";

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç S3 —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
const s3Client = new S3Client({
  region: process.env.S3_REGION,
  endpoint: process.env.S3_ENDPOINT,
  credentials: {
    accessKeyId: process.env.S3_ACCESS_KEY,
    secretAccessKey: process.env.S3_SECRET_KEY,
  },
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ S3
export const uploadToS3 = async (filePath, fileName) => {
  try {
    const fileContent = fs.readFileSync(filePath);

    const params = {
      Bucket: process.env.S3_BUCKET_NAME,
      Key: `videos/${fileName}`, // –ü—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –±–∞–∫–µ—Ç–∞
      Body: fileContent,
      ContentType: "video/mp4",
      ACL: "public-read", // –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
    };

    const command = new PutObjectCommand(params);
    await s3Client.send(command);
    logger.info(
      `‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ S3 –ø–æ –ø—É—Ç–∏: ${process.env.S3_ENDPOINT.replace(/\/$/, "")}/${process.env.S3_BUCKET_NAME}/videos/${fileName}`
    );

    // AWS SDK v3 –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Location, –ø–æ—ç—Ç–æ–º—É URL –º–æ–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é
    return `${process.env.S3_ENDPOINT.replace(/\/$/, "")}/${process.env.S3_BUCKET_NAME}/videos/${fileName}`;
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ S3: ${error}`);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ S3
export const deleteFromS3 = async (fileName) => {
  try {
    const params = {
      Bucket: process.env.S3_BUCKET_NAME,
      Key: `videos/${fileName}`,
    };

    const command = new DeleteObjectCommand(params);
    await s3Client.send(command);
    logger.info(`üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ S3: videos/${fileName}`);
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ S3: ${error}`);
  }
};
