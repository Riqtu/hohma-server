import schedule from "node-schedule";
import axios from "axios";
import telegramService from "../services/telegramService.js";
import logger from "#config/logger.js";

const escapeMarkdownV2 = (text) => text.replace(/[_*[\]()~`>#+\-=|{}.!]/g, "\\$&");

const startScheduler = () => {
  schedule.scheduleJob("0 5 * * *", async () => {
    logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏.");

    try {
      const affirmation = await axios.get("https://hohma-server.ru/api/affirmations/random");

      if (affirmation.data) {
        const affirmationText = escapeMarkdownV2(
          affirmation?.data?.text || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é"
        );
        const message = [
          "*üåü –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –•–û–•–ú—Ñ–∏—Ä–º–∞—Ü–∏—è üåü*",
          "",
          `> ${affirmationText}`,
          "",
          "_–£–¥–∞—á–Ω–æ–≥–æ –≤–∞–º –¥–Ω—è_",
        ].join("\n");

        await telegramService.sendMessage(process.env.CHAT_ID, message, "MarkdownV2");
      } else {
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é.");
      }
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏:", error);
    }
  });
};

export default startScheduler;
